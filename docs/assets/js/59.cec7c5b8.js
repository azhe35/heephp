(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{381:function(t,r,v){"use strict";v.r(r);var e=v(33),o=Object(e.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"概览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),v("p",[t._v("HeePHP是基于PHP7.3+版本之上的PHP框架，因此目前暂时只支持运行在PHP环境，对于其他语言环境暂时不支持。")]),t._v(" "),v("h3",{attrs:{id:"mvc架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvc架构"}},[t._v("#")]),t._v(" MVC架构")]),t._v(" "),v("p",[t._v("MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。")]),t._v(" "),v("blockquote",[v("p",[t._v("模型－视图－控制器（MVC）是Xerox PARC在二十世纪八十年代为编程语言Smalltalk－80发明的一种软件设计模式，已被广泛使用。后来被推荐Oracle旗下Sun公司Java EE平台的设计模式，并且受到越来越多的使用ColdFusion(动态网页)和PHP的开发者的欢迎。")])]),t._v(" "),v("h5",{attrs:{id:"mvc-是一种使用-mvc（model-view-controller-模型-视图-控制器）设计创建-web-应用程序的模式："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvc-是一种使用-mvc（model-view-controller-模型-视图-控制器）设计创建-web-应用程序的模式："}},[t._v("#")]),t._v(" "),v("strong",[t._v("MVC")]),t._v(" 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Model")]),t._v("（模型）是应用程序中用于处理应用程序数据逻辑的部分。"),v("br"),t._v("\n　　通常模型对象负责在数据库中存取数据。")]),t._v(" "),v("li",[v("strong",[t._v("View")]),t._v("（视图）是应用程序中处理数据显示的部分。"),v("br"),t._v("\n　　通常视图是依据模型数据创建的。")]),t._v(" "),v("li",[v("strong",[t._v("Controller")]),t._v("（控制器）是应用程序中处理用户交互的部分。"),v("br"),t._v("\n　　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。")])]),t._v(" "),v("blockquote",[v("p",[t._v("MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。")])]),t._v(" "),v("blockquote",[v("p",[t._v("MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。")])]),t._v(" "),v("h3",{attrs:{id:"aop模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aop模式"}},[t._v("#")]),t._v(" AOP模式")]),t._v(" "),v("p",[t._v("Aspect Oriented Programming（AOP）是较为热门的一个话题。AOP，国内大致译作“"),v("strong",[t._v("面向切面编程")]),t._v("”。")]),t._v(" "),v("p",[v("strong",[t._v("面向过程")]),t._v("编程离我们已经有些遥远"),v("br"),t._v(" "),v("strong",[t._v("面向对象")]),t._v("编程正主宰着软件世界。当每个新的软件设计师都被要求掌握如何将需求功能转化成一个个类，并且定义它们的数据成员、行为，以及它们之间复杂的关系的时候"),v("br"),t._v(" "),v("strong",[t._v("面向切面编程")]),t._v("（Aspect-Oriented Programming，AOP）为我们带来了新的想法、新的思想、新的模式。")]),t._v(" "),v("h3",{attrs:{id:"aop与oop-面向对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aop与oop-面向对象"}},[t._v("#")]),t._v(" AOP与OOP(面向对象)")]),t._v(" "),v("p",[v("em",[v("strong",[t._v("AOP、OOP在字面上虽然非常类似，但却是面向不同领域的两种设计思想。")])])]),t._v(" "),v("p",[v("strong",[t._v("OOP")]),t._v("（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。")]),t._v(" "),v("p",[v("strong",[t._v("AOP")]),t._v("（面向切面编程）则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。")])])}),[],!1,null,null,null);r.default=o.exports}}]);